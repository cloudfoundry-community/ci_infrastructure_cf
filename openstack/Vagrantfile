# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
require 'rubygems'

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.ssh.private_key_path = "~/.ssh/vagrant.pem"

  config.vm.box = "dummy"
  config.vm.box_url = 'https://github.com/cloudbau/vagrant-openstack-plugin/raw/master/dummy.box'

  config.berkshelf.enabled = true
config.berkshelf.berksfile_path = '../Berksfile'
  config.omnibus.chef_version = :latest
	

  config.vm.provider :openstack do |os|
    os.server_name = "Jenkins CI Infrastructure For CF"
    os.username     =ENV['OS_USERNAME']
    os.api_key      =ENV['OS_PASSWORD']
    os.flavor       =ENV['OS_FLAVOR']
    os.image        =ENV['OS_IMAGE']
    os.endpoint     = "#{ENV['OS_AUTH_URL'].strip}/tokens"
    os.keypair_name = ENV['OS_KEYPAIR_NAME']
    os.ssh_username = "ubuntu"           # login for the VM

    # os.metadata  = {"key" => "value"}                      # optional
    # os.user_data = "#cloud-config\nmanage_etc_hosts: True" # optional
    # os.network            = "internal"            # optional
    os.networks           = [ "#{ENV['OS_NETWORK']}" ]     # optional, overrides os.network
    # os.address_id         = "YOUR ADDRESS ID"# optional (`network` above has higher precedence)
    # os.scheduler_hints    = {
    # :cell => 'australia'
    # }                                          # optional
    # os.availability_zone  = "az0001"           # optional
    os.security_groups    = [ 'ssh', 'jenkins' ]    # optional
    os.tenant             = ENV['OS_TENANT_NAME']
    os.floating_ip        = ENV['JENKINS_FLOATING_IP']
  end


  config.vm.provision :chef_solo do |chef|
    chef.json = {
      ci_infrastructure_cf: {
        jobs:{
          microbosh:{
            provider:{
            name: 'openstack',
            user: ENV['OS_USERNAME'],
            pass: ENV['OS_PASSWORD'],
            tenant: ENV['OS_TENANT'],
            auth_url: ENV['OS_AUTH_URL'],
            },
            address:{
              ip: ENV['MICROBOSH_IP'],
              subnet_id: ENV['MICROBOSH_SUBNET_ID']
            }
          },
          bosh:{
            spiff_stub:{
              meta:{
                networks:{
                  manual:{
                    range: ENV['BOSH_RANGE']
                  }
                }
              }
            }
          },
          cloudfoundry:{
            spiff_stub:{
              meta:{ 
                floating_static_ips: ENV['CF_FLOATING_STATIC_IPS']
              },
              networks:{
                cf1:{
                  subnets:{
                    default_unused:{
                      gateway: ENV['CF_GATEWAY'],
                      reserved: ENV['CF_RESERVED_RANGE'], #['1.1.1.1 - 2.2.2.2','3.3.3.3 - 4.4.4.4']
                      static: ENV['CF_STATIC_RANGE'], #['5.5.5.5 - 6.6.6.6']
                    }
                  }
                }
              }
            }
          }
        },
        hosts: {
          '1.2.3.4' => 'example.com'
        }
      }
    }

    chef.run_list = [
      "jenkins::master",
      "ci_infrastructure_cf"
    ]
  end
  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file dumb.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
