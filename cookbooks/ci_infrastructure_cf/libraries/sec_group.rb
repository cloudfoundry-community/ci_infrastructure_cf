require_relative 'provider'

class Chef
  class Resource::SecGroup < Resource::LWRPBase
    # identity_attr :id
    provides :sec_group

    # Set the resource name
    self.resource_name = :sec_group

    # Actions
    actions :create
    default_action :create

    attribute :sg_name,
      kind_of: String
    attribute :ports,
      kind_of: Object
    attribute :protocol,
      kind_of: String
  end
end

class Chef
  class Provider::SecGroup < Provider::LWRPBase

    def load_current_resource
      @current_resource ||= Resource::SecGroup.new(new_resource.name)
      @current_resource.tap do |r|
        r.ports(new_resource.ports)
        r.sg_name(new_resource.sg_name || new_resource.name)
        r.protocol(new_resource.protocol)
      end
    end

    #
    # This provider supports why-run mode.
    #
    def whyrun_supported?
      true
    end

    def provider
      CiInfrastructureCf::Provider.new
    end

    action(:create) do
      converge_by("Create #{new_resource}") do
        @new_resource.tap do |r|
        provider.create_security_group(
          r.sg_name || r.name,
          'Automated sg generated by ci_infrastructure_cf',
          {protocol: r.protocol, ports: r.ports}
        )
        end
      end
    end
    private
  end
end

Chef::Platform.set(
  resource: :sec_group,
  provider: Chef::Provider::SecGroup
)
